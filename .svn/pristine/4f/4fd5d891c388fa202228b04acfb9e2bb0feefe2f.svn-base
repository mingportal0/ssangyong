 /**
 * @Class Name : ProductDAO.java
 * @Description : 
 * @Modification Information
 * @
 * @  수정일      수정자              수정내용
 * @ ---------   ---------   -------------------------------
 * @ 2019. 7. 15.           최초생성
 *
 * @author Zimzalabim
 * @since 2019. 7. 15. 
 * @version 1.0
 * @see
 *
 *  Copyright (C) by HR. KIM All right reserved.
 */
package com.zim.product;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import com.zim.cmn.JDBCReturnReso;
import com.zim.cmn.ConnectionMaker;
import com.zim.cmn.DTO;
import com.zim.cmn.WorkDiv;

/**
 * @author sist
 *
 */
public class ProductDao implements WorkDiv {

	
	private final Logger LOG = Logger.getLogger(ProductDao.class);
	private ConnectionMaker connectionMaker;
	
	
	public ProductDao() {
		connectionMaker = new ConnectionMaker();
	}
	
	
	
	

	//공지조회
	public DTO do_notice_select(DTO dto){
		ProductVO vo = (ProductVO)dto;
		ProductVO outVO = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		
		try{
			StringBuilder sb = new StringBuilder();
			sb.append("  SELECT             		\n");
			sb.append("      p.product_no,   		\n");
			sb.append("      p.notice       		\n");
			sb.append("  FROM  product p   		    \n");
			sb.append("  WHERE p.product_no = ?     \n");
			
			
			conn = connectionMaker.getConnection();
			LOG.debug("1.===================");
			LOG.debug("1.query:\n"+sb.toString());
			LOG.debug("1.===================");
			
			
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setString(1, vo.getProductNo());
			//쿼리 파람 셋팅
			LOG.debug("2.===================");
			LOG.debug("2.param seq:\n"+sb.toString());
			LOG.debug("2.===================");
			
			rs = pstmt.executeQuery();
			if(rs.next()){
				outVO = new ProductVO();
				outVO.setNotice(rs.getString("product_no"));
				outVO.setNotice(rs.getString("notice"));
				
				return outVO;
				
			}
			
			
		}catch(SQLException e){
			LOG.debug("=================");
			LOG.debug("SQLException="+e.getMessage());
			LOG.debug("=================");
		}finally{
			JDBCReturnReso.close(rs);
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		
		
		return null;
		
	}
	
	
	
	//상품상세조회
	public DTO do_detail_select(DTO dto){
		ProductVO vo = (ProductVO)dto;
		ProductVO outVO = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		
		try{
			StringBuilder sb = new StringBuilder();
			sb.append("  SELECT													\n");										
			sb.append("      i.image_id,                                        \n");
			sb.append("      p.product_no,                                      \n");
			sb.append("      p.product_nm,                                      \n");
			sb.append("      (p.target_cnt - p.join_cnt) AS rest_amount,        \n");
			sb.append("      TO_CHAR(p.deadline,'YYYY.MM.DD') AS deadline,      \n");
			sb.append("      p.delivery_price,                                  \n");
			sb.append("      p.price,                                           \n");
			sb.append("      p.contents,                                        \n");
			sb.append("      p.reg_id,                                          \n");
			sb.append("      TO_CHAR(p.reg_dt,'YYYY.MM.DD') AS reg_dt           \n");
			sb.append("  FROM                                                   \n");
			sb.append("      product p JOIN image i                             \n");
			sb.append("  ON p.product_no = i.product_no                         \n");
			sb.append("  AND p.product_no = ? 			                        \n");
			sb.append("  AND i.thumbnail = '1'                                  \n");
			
			
			conn = connectionMaker.getConnection();
			LOG.debug("1.===================");
			LOG.debug("1.query:\n"+sb.toString());
			LOG.debug("1.===================");
			
			
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setString(1, vo.getProductNo());
			//쿼리 파람 셋팅
			LOG.debug("2.===================");
			LOG.debug("2.param seq:\n"+sb.toString());
			LOG.debug("2.===================");
			
			rs = pstmt.executeQuery();
			if(rs.next()){
				outVO = new ProductVO();
				outVO.setImageId(rs.getString("image_id"));
				outVO.setProductNo(rs.getString("product_no"));
				outVO.setProductNm(rs.getString("product_nm"));
				outVO.setRestAmount(rs.getString("rest_amount"));
				outVO.setDeadline(rs.getString("deadline"));
				outVO.setPrice(rs.getString("price"));
				outVO.setContents(rs.getString("contents"));
				outVO.setRegId(rs.getString("reg_id"));
				outVO.setRegDt(rs.getString("reg_dt"));
				
				
				return outVO;
				
			}
			
			
		}catch(SQLException e){
			LOG.debug("=================");
			LOG.debug("SQLException="+e.getMessage());
			LOG.debug("=================");
		}finally{
			JDBCReturnReso.close(rs);
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		
		
		return null;
		
	}
	
	
	//최근등록조회
	public List<?> do_latest_select(DTO dto){
		List<ProductVO> list = new ArrayList<>();
		ProductVO outVO = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		
		try{
			StringBuilder sb = new StringBuilder();
			sb.append(" SELECT T1.*,T2.*											\n");
			sb.append(" FROM                                                        \n");
			sb.append(" (                                                           \n");
			sb.append("     SELECT b.rnum num,                                      \n");
			sb.append("            b.*                                              \n");
			sb.append("     FROM(                                                   \n");
			sb.append("         SELECT ROWNUM rnum                                  \n");
			sb.append(" 				,A.*                                        \n");
			sb.append("         FROM(                                               \n");
			sb.append("             SELECT                                          \n");
			sb.append(" 				i.image_id,                                 \n");
			sb.append(" 				p.product_no,                               \n");
			sb.append(" 				p.product_nm,                               \n");
			sb.append(" 				p.price,                                    \n");
			sb.append(" 				TO_CHAR(p.reg_dt ,'YYYY.MM.DD')	reg_dt 	    \n");
			sb.append("             FROM product p JOIN image i                     \n");
			sb.append("             ON p.product_no = i.product_no                  \n");
			sb.append(" 			AND i.thumbnail = '1'                           \n");
			sb.append(" 			ORDER BY p.reg_dt DESC                          \n");
			sb.append("         )A                                                  \n");
			sb.append("         WHERE ROWNUM <= 8                                   \n");
			sb.append("     )B                                                      \n");
			sb.append("     WHERE B.rnum>= 1                                        \n");
			sb.append(" )T1 CROSS JOIN                                              \n");
			sb.append(" (                                                           \n");
			sb.append("     SELECT COUNT(*) total_cnt                               \n");
			sb.append("     FROM product p JOIN image i                             \n");
			sb.append("     ON p.product_no = i.product_no                          \n");
			sb.append(" 	AND i.thumbnail = '1'                                   \n");
			sb.append(" )T2                                                         \n");
			
			
			conn = connectionMaker.getConnection();
			LOG.debug("1.===================");
			LOG.debug("1.query:\n"+sb.toString());
			LOG.debug("1.===================");
			
			
			pstmt = conn.prepareStatement(sb.toString());
			//쿼리 파람 셋팅
			LOG.debug("2.===================");
			LOG.debug("2.param seq:\n"+sb.toString());
			LOG.debug("2.===================");
			
			rs = pstmt.executeQuery();
			while(rs.next()){
				outVO = new ProductVO();
				outVO.setImageId(rs.getString("image_id"));
				outVO.setProductNo(rs.getString("product_no"));
				outVO.setProductNm(rs.getString("product_nm"));
				outVO.setPrice(rs.getString("price"));
				outVO.setRegDt(rs.getString("reg_dt"));
				list.add(outVO);
				
			}
			
			
		}catch(SQLException e){
			LOG.debug("=================");
			LOG.debug("SQLException="+e.getMessage());
			LOG.debug("=================");
		}finally{
			JDBCReturnReso.close(rs);
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		
		
		return list;
		
		
	}
	
	
	
	
	//베스트 상품 조회
	public List<?> do_best_select(DTO dto){
		List<ProductVO> list = new ArrayList<>();
		ProductVO outVO = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		
		try{
			StringBuilder sb = new StringBuilder();
			sb.append("  SELECT T1.*,T2.*											\n");
			sb.append("  FROM                                                       \n");
			sb.append("  (                                                          \n");
			sb.append("      SELECT b.rnum num,                                     \n");
			sb.append("             b.*                                             \n");
			sb.append("      FROM(                                                  \n");
			sb.append("          SELECT ROWNUM rnum                                 \n");
			sb.append("  				,A.*                                        \n");
			sb.append("          FROM(                                              \n");
			sb.append("  			SELECT                            			    \n");
			sb.append("  				i.image_id,                   			    \n");
			sb.append("  				p.product_no,                 			    \n");
			sb.append("  				p.product_nm,                 			    \n");
			sb.append("  				p.price,                      			    \n");
			sb.append("  				p.read_cnt,                   			    \n");
			sb.append("  				TO_CHAR(p.reg_dt ,'YYYY.MM.DD')	reg_dt      \n");
			sb.append("  			FROM                              			    \n");
			sb.append("  				product p JOIN image i        			    \n");
			sb.append("  			ON p.product_no = i.product_no    			    \n");
			sb.append("  			AND p.reg_dt+10>=SYSDATE          			    \n");
			sb.append("  			AND i.thumbnail = '1'             			    \n");
			sb.append("  			ORDER BY p.read_cnt DESC                        \n");
			sb.append("          )A                                                 \n");
			sb.append("          WHERE ROWNUM <= 8                                  \n");
			sb.append("      )B                                                     \n");
			sb.append("      WHERE B.rnum>= 1                                       \n");
			sb.append("  )T1 CROSS JOIN                                             \n");
			sb.append("  (                                                          \n");
			sb.append("      SELECT COUNT(*) total_cnt                              \n");
			sb.append("      FROM                              			            \n");
			sb.append("  		product p JOIN image i        			            \n");
			sb.append("  	ON p.product_no = i.product_no    			            \n");
			sb.append("  	AND p.reg_dt+10>=SYSDATE          			            \n");
			sb.append("  	AND i.thumbnail = '1'                                   \n");
			sb.append("  )T2                                                        \n");
			
			
			conn = connectionMaker.getConnection();
			LOG.debug("1.===================");
			LOG.debug("1.query:\n"+sb.toString());
			LOG.debug("1.===================");
			
			
			pstmt = conn.prepareStatement(sb.toString());
			//쿼리 파람 셋팅
			LOG.debug("2.===================");
			LOG.debug("2.param seq:\n"+sb.toString());
			LOG.debug("2.===================");
			
			rs = pstmt.executeQuery();
			while(rs.next()){
				outVO = new ProductVO();
				outVO.setImageId(rs.getString("image_id"));
				outVO.setProductNo(rs.getString("product_no"));
				outVO.setProductNm(rs.getString("product_nm"));
				outVO.setPrice(rs.getString("price"));
				outVO.setReadCnt(rs.getString("read_cnt"));
				outVO.setRegDt(rs.getString("reg_dt"));
				list.add(outVO);
				
			}
			
			
		}catch(SQLException e){
			LOG.debug("=================");
			LOG.debug("SQLException="+e.getMessage());
			LOG.debug("=================");
		}finally{
			JDBCReturnReso.close(rs);
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		
		
		return list;
		
		
	}
	
	
	
	
	
	
	//마감임박
	public List<?> do_imminent_select(DTO dto) {
		List<ProductVO> list = new ArrayList<>();
		ProductVO outVO = null;
		Connection conn = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		
		try{
			StringBuilder sb = new StringBuilder();
			sb.append("   SELECT T1.*,T2.*												\n");
			sb.append("   FROM                                                          \n");
			sb.append("   (                                                             \n");
			sb.append("       SELECT b.rnum num,                                        \n");
			sb.append("              b.*                                                \n");
			sb.append("       FROM(                                                     \n");
			sb.append("           SELECT ROWNUM rnum                                    \n");
			sb.append("   				,A.*                                            \n");
			sb.append("           FROM(                                                 \n");
			sb.append("   			SELECT                           					\n");
			sb.append("   				i.image_id,                  					\n");
			sb.append("   				p.product_no,                 					\n");
			sb.append("   				p.product_nm,               					\n");
			sb.append("   				p.price,                     					\n");
			sb.append("   				TO_CHAR(p.deadline ,'YYYY.MM.DD') deadline  	\n");
			sb.append("   			FROM                             					\n");
			sb.append("   				product p JOIN image i      					\n");
			sb.append("   			ON p.product_no = i.product_no   					\n");
			sb.append("   			AND i.thumbnail = '1'           					\n");
			sb.append("   			ORDER BY p.deadline                                 \n");
			sb.append("           )A                                                    \n");
			sb.append("           WHERE ROWNUM <= 8                                     \n");
			sb.append("       )B                                                        \n");
			sb.append("       WHERE B.rnum>= 1                                          \n");
			sb.append("   )T1 CROSS JOIN                                                \n");
			sb.append("   (                                                             \n");
			sb.append("       SELECT COUNT(*) total_cnt                                 \n");
			sb.append("   	FROM                             					        \n");
			sb.append("   		product p JOIN image i      					        \n");
			sb.append("   	ON p.product_no = i.product_no   					        \n");
			sb.append("   	AND i.thumbnail = '1'                                       \n");
			sb.append("   )T2                                                           \n");
			
			conn = connectionMaker.getConnection();
			LOG.debug("1.===================");
			LOG.debug("1.query:\n"+sb.toString());
			LOG.debug("1.===================");
			
			
			pstmt = conn.prepareStatement(sb.toString());
			//쿼리 파람 셋팅
			LOG.debug("2.===================");
			LOG.debug("2.param seq:\n"+sb.toString());
			LOG.debug("2.===================");
			
			rs = pstmt.executeQuery();
			while(rs.next()){
				outVO = new ProductVO();
				outVO.setImageId(rs.getString("image_id"));
				outVO.setProductNo(rs.getString("product_no"));
				outVO.setProductNm(rs.getString("product_nm"));
				outVO.setPrice(rs.getString("price"));
				outVO.setDeadline(rs.getString("deadline"));
				list.add(outVO);
				
			}
			
			
		}catch(SQLException e){
			LOG.debug("=================");
			LOG.debug("SQLException="+e.getMessage());
			LOG.debug("=================");
		}finally{
			JDBCReturnReso.close(rs);
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		
		
		return list;
	}
	
	
	
	
	
	
	

	@Override
	public int do_insert(DTO dto){
		ProductVO vo = (ProductVO) dto;
		
		int flag = 0;
		Connection conn = null;	
		PreparedStatement pstmt = null;
		try{
			//conn = connectionMaker.getConnection();
			conn = new ConnectionMaker().getConnection();
			LOG.debug("1. conn:"+conn);
			StringBuilder sb = new StringBuilder();
			sb.append("INSERT INTO product (     \n");
			sb.append("        product_no,       \n");
			sb.append("        product_nm,       \n");
			sb.append("        price,            \n");
			sb.append("        category,         \n");
			sb.append("        contents,         \n");
			sb.append("        target_cnt,       \n");
			sb.append("        deadline,         \n");
			sb.append("        reg_id,           \n");
			sb.append("        reg_dt,           \n");
			sb.append("        delivery_price    \n");
			sb.append(") VALUES (                \n");
			sb.append("        SEQ_WRITE.nextval,\n");
			sb.append("        ?,     			 \n");
			sb.append("        ?,      		     \n");
			sb.append("        ?,      			 \n");
			sb.append("        ?,      			 \n");
			sb.append("        ?,      			 \n");
			sb.append("        ?,        		 \n");
			sb.append("        ?,          		 \n");
			sb.append("        SYSDATE,   		 \n");
			sb.append("        ?          		 \n");
			sb.append(")                         \n");
			
			LOG.debug("2. sql:\n"+sb.toString()); //위의 SQL이 담겨있다
			LOG.debug("3. param:\n"+vo.toString());//SQL문으로 조회해온 정보들이 담겨있다.
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setString(1, vo.getProductNm());
			pstmt.setString(2, vo.getPrice());
			pstmt.setString(3, vo.getCategory());
			pstmt.setString(4, vo.getContents());
			pstmt.setString(5, vo.getTargetCnt());
			pstmt.setString(6, vo.getDeadline());
			pstmt.setString(7, vo.getRegId());
			pstmt.setString(8, vo.getDeliveryPrice());
			
			flag = pstmt.executeUpdate();
			//executeUpdate : 수행결과로 Int 타입의 값을 반환
			//SELECT 구문을 제외한 다른 구문을 수행할 때 사용되는 함수
			
			LOG.debug("5.flag:\n"+flag);
			
		}catch(SQLException e){
			e.printStackTrace();
		}finally{
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		return flag;
	}

	/* (non-Javadoc)
	 * @see com.zim.cmn.WorkDiv#do_update(com.zim.cmn.DTO)
	 */
	@Override
	public int do_update(DTO dto) {
		ProductVO vo = (ProductVO) dto;
		int flag = 0;
		Connection conn = null;
		PreparedStatement pstmt = null;
		try{
			StringBuilder sb=new StringBuilder();
			sb.append("UPDATE product     		\n");
			sb.append("SET  product_nm = ? 		\n");
			sb.append("    ,price = ?      		\n");
			sb.append("    ,category = ?  		\n");
			sb.append("    ,contents = ?   		\n");
			sb.append("    ,target_cnt = ? 		\n");
			sb.append("    ,deadline = ?  		\n");
			sb.append("    ,delivery_price = ?	\n");
			sb.append("WHERE               		\n");
			sb.append("    product_no = ?  		\n");
			
			conn = new ConnectionMaker().getConnection();
			LOG.debug("1.======================");
			LOG.debug("1.query \n"+sb.toString());
			LOG.debug("1.======================");
			
			pstmt = conn.prepareStatement(sb.toString());
			pstmt.setString(1, vo.getProductNm());
			pstmt.setString(2, vo.getPrice());
			pstmt.setString(3, vo.getCategory());
			pstmt.setString(4, vo.getContents());
			pstmt.setString(5, vo.getTargetCnt());
			pstmt.setString(6, vo.getDeadline());
			pstmt.setString(7, vo.getDeliveryPrice());
			pstmt.setString(8, vo.getProductNo());
			LOG.debug("2.===================");
			LOG.debug("2.param :"+vo);
			LOG.debug("2.===================");
			
			flag = pstmt.executeUpdate();
			LOG.debug("3.===================");
			LOG.debug("3.flag="+flag);
			LOG.debug("3.===================");
		}catch(SQLException s){
			LOG.debug("===================");
			LOG.debug("SQLException="+s.toString());
			LOG.debug("===================");			
		}finally{
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		
		return flag;
	}

	/* (non-Javadoc)
	 * @see com.zim.cmn.WorkDiv#do_delete(com.zim.cmn.DTO)
	 */
	@Override
	public int do_delete(DTO dto) {
		ProductVO vo = (ProductVO) dto;
		int flag = 0;
		Connection conn = null;		
		PreparedStatement pstmt = null;		
		
		StringBuilder sb=new StringBuilder();
		sb.append("DELETE FROM product  \n");
		sb.append("WHERE PRODUCT_NO = ? \n");
		
		try {
			
			conn = new ConnectionMaker().getConnection();;

			LOG.debug("1======================");
			LOG.debug("query:\n"+sb.toString());
			LOG.debug("1======================");
			
			pstmt = conn.prepareStatement(sb.toString());
			//query param
			pstmt.setString(1, vo.getProductNo());
			LOG.debug("2======================");
			LOG.debug("query, seq"+vo.getProductNo());
			LOG.debug("2======================");

			flag = pstmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}finally{//사용한 자원 반납하기
			JDBCReturnReso.close(pstmt);
			JDBCReturnReso.close(conn);
		}
		
		LOG.debug("3=====================");
		LOG.debug("flag:"+flag);
		LOG.debug("3=====================");
		
		return 0;
	}

	/* (non-Javadoc)
	 * @see com.zim.cmn.WorkDiv#do_selectOne(com.zim.cmn.DTO)
	 */
	@Override
	public DTO do_selectOne(DTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.zim.cmn.WorkDiv#do_retrieve(com.zim.cmn.DTO)
	 */
	@Override
	public List<?> do_retrieve(DTO dto) {
		// TODO Auto-generated method stub
		return null;
	}

}
